import React, { useState, useEffect, useCallback, useRef } from "react";
import { NavLink, useNavigate } from "react-router-dom";
import flames from "../images/flames.png";
import rndlogo from "../images/rndlogo.png";
import Submenu from "./SubMenu";
import MobileMenu from "./MobileMenu";

const Navbar = () => {
  const [data, setData] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [submenuTimeout, setSubmenuTimeout] = useState(null);
  const [isSubmenuOpen, setIsSubmenuOpen] = useState(false);
  const [currentSubmenu, setCurrentSubmenu] = useState(null);
  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);
  const ref = useRef(null);
  const navigate = useNavigate();

  useEffect(() => {
    const fetchData = async () => {
      try {
        const response = await fetch("http://localhost:3006/api/menulisting/fetchMenuWithSubmenus");
        if (!response.ok) {
          throw new Error("Network response was not ok");
        }
        const result = await response.json();
        setData(result);
        setLoading(false);
      } catch (error) {
        setError(error.message);
        setLoading(false);
      }
    };

    fetchData();
  }, []);

  const handleMouseEnter = useCallback(
    (submenu) => {
      clearTimeout(submenuTimeout);
      setIsSubmenuOpen(true);
      setCurrentSubmenu(submenu);
    },
    [submenuTimeout]
  );

  const handleMouseLeave = useCallback(() => {
    const timeout = setTimeout(() => {
      closeSubmenu();
    }, 300);
    setSubmenuTimeout(timeout);
  }, []);

  const handleSubmenuMouseEnter = () => {
    clearTimeout(submenuTimeout);
    setIsSubmenuOpen(true);
  };

  const handleSubmenuMouseLeave = () => {
    handleMouseLeave();
  };

  const toggleMobileMenu = () => {
    setIsMobileMenuOpen((prev) => !prev);
  };

  const handleMobileSubmenuToggle = (link) => {
    if (link.label === "Services" && link.submenu) {
      setIsSubmenuOpen((prev) => !prev);
    } else {
      setIsMobileMenuOpen(false);
    }
  };

  const closeSubmenu = () => {
    setIsSubmenuOpen(false);
    setCurrentSubmenu(null);
  };

  const handleClick = (path) => {
    closeSubmenu();
    navigate(path);
  };

  if (loading) {
    return <div>Loading...</div>;
  }

  if (error) {
    return <div>Error: {error}</div>;
  }

  return (
    <div className="w-full fixed z-10">
      <nav className="bg-white border-b border-gray-200 xl:mx-12 rounded-b-lg shadow-lg xl:block flex flex-row-reverse">
        <div className="bg-[#333] text-white text-center py-1 flex justify-center font-bold text-md xl:flex hidden">
          {/* Assuming data.latestNews is available in your API response */}
          {data.latestNews}{" "}
          <img src={flames} alt="fire" className="h-6 w-auto" />
        </div>
        <div className="container mx-auto px-4 flex justify-between items-center">
          <div className="lg:hidden" ref={ref}>
            <MobileMenu
              isMobileMenuOpen={isMobileMenuOpen}
              toggleMobileMenu={toggleMobileMenu}
              data={data}
              handleMobileSubmenuToggle={handleMobileSubmenuToggle}
              isSubmenuOpen={isSubmenuOpen}
            />
          </div>
          <div className="flex items-center space-x-8">
            <NavLink to="/">
              <img src={rndlogo} alt="Rnd logo" className="h-12 my-3" />
            </NavLink>
          </div>
          <div className="hidden lg:flex items-center space-x-12">
            {data.map((menu) => (
              <div key={menu._id} className="relative group">
                <NavLink
                  to={menu.pagename}
                  className="text-gray-700 hover:text-green-700"
                  onClick={() => handleClick(menu.pagename)}
                  onMouseEnter={() => handleMouseEnter(menu.submenus)}
                  onMouseLeave={handleMouseLeave}
                >
                  {menu.pagename}
                </NavLink>
                {isSubmenuOpen && currentSubmenu && (
                  <div
                    onMouseEnter={handleSubmenuMouseEnter}
                    onMouseLeave={handleSubmenuMouseLeave}
                  >
                    <Submenu submenu={currentSubmenu} onMouseLeave={closeSubmenu} setShowMenu={closeSubmenu} />
                  </div>
                )}
              </div>
            ))}
          </div>
          <div className="lg:flex items-center space-x-4">
            {/* Assuming authLinks is part of the API response */}
            {data.authLinks && data.authLinks.map((link) => (
              <NavLink key={link.path} to={link.path} className="text-gray-800 font-bold hover:text-[#f3ca0d] hidden lg:block">
                {link.label}
              </NavLink>
            ))}
          </div>
        </div>
        {isSubmenuOpen && currentSubmenu && (
          <div
            onMouseEnter={handleSubmenuMouseEnter}
            onMouseLeave={handleSubmenuMouseLeave}
          >
            <Submenu submenu={currentSubmenu} onMouseLeave={closeSubmenu} setShowMenu={closeSubmenu} />
          </div>
        )}
      </nav>
    </div>
  );
};

export default Navbar;
